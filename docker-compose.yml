services:
  # Веб-сервер Nginx
  nginx:
    build: ./nginx
    ports:
      - "666:80"
    volumes:
      - ./web:/usr/share/nginx/html
      - ./nginx/default.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
    restart: always

  # API сервер (Node.js для примера)
  api:
    build: ./api
    environment:
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
      - DB_NAME=lohozavrik_db
      - JWT_SECRET=${JWT_SECRET:-secret}
    volumes:
      - ./api:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    restart: always

  # База данных MySQL
  db:
    image: mysql:8.0
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
      - MYSQL_DATABASE=lohozavrik_db
      - MYSQL_USER=${DB_USER:-user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root}"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Инструмент для управления базой данных (опционально)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    environment:
      PMA_HOST: db
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
    ports:
      - "6666:80"
    depends_on:
      db:
        condition: service_healthy
  
  # Backup сервис с cron
  backup:
    image: mysql:8.0
    volumes:
      - ./db/backup:/backup
      - ./db/backup/backup.sh:/backup.sh
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
      - MYSQL_HOST=db
      - MYSQL_DATABASE=lohozavrik_db
    entrypoint: /bin/bash
    command: -c "apt-get update && apt-get install -y cron && chmod +x /backup.sh && (crontab -l 2>/dev/null; echo '0 0 * * * /backup.sh >> /backup/backup.log 2>&1') | crontab - && cron -f"
    depends_on:
      db:
        condition: service_healthy
  
  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - api
      - db
  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  mysql_data:
  grafana_data: